Rules:

1. User can have only one active game at a time

Elements:

1. Congratulations Popup

	* Will show a Happy Emoji. :)
	* Will show the message: Congratulations! x out of y words are correct!
	* The 'New Game' button will be below.

2. Error message Popup

	* Will have a Sad Emoji on the left and the Error Message on the right.

3. App Header

	State 1 (not logged in):
		* Will show the Game Icon on the left and the Login button on the right.

	State 2 (logged in):
		* Will show the Game Icon on the left and the 'Welcome, Ivan Gandacov!' message and Logout button on the right.

4. App Footer

	* Will show the @Copyright in the middle.

Workflow:

1. User enters the application website at a random URL:

	1.1 If he is not logged in already, he is redirected to /home page, go to 2.1.
	1.2 If he is logged in:
		1.2.1 If user tries to access /home page, go to 2.2.
		1.2.2 If the user tries to access /text-fill or /text-input directly, go to 3.
	
2. On the Home page:

	UI State:
		* The page content will have a short description of the app and a Video Tutorial.

	2.1 Not logged in:

		UI State:
			* Elements#3State#1

		2.1.1 User clicks on Login, the Google Authentication Window pops-up.
		2.1.2 If user authenticated successfully, go to 3.
		2.1.3 If not, show Elements#2 with Login Failed message.
		
	2.2 Logged in:

		UI State:
			* Elements#3State#2

		2.2.1 User clicks on Logout, go to 2.1.
	
3. Check if the user has an existing active game.
	3.1 If no, then redirect to /text-input (go to 4).
	3.2 If yes, then redirect to /text-fill (go to 5).
	
4. Text input (/text-input):

	UI State:
		* Elements#3State#2
		* A text field will be shown, with a Done button below it.
		* The Done button will be disabled until user inputs at least 5 words.
	
	4.1 Write the text.
	4.2 If text.words.length >= 5, then click on Done and go to 4.1, else go to 5.
		On Done click the Text will be saved in the database.
	
5. Playing the game
	
	5.1. Game has not started yet (/text-fill):

		UI State:
			* Elements#3State#2
			* On the left, Level + Remix buttons are enabled.
			* On the right the "Play" button will be displayed enabled.
			* The Level element will show a level from 1 to 10. The default level will be 2.
			* The text shown below will already be shuffled according to level 2.
		
		5.1.1 Fetch the active game from the backend.
		5.1.2 On Level change the text will be remixed automatically.
		5.1.3 User can request another remix by clicking on Remix button.
		5.1.4 When done, user clicks on "Play" button and go to 5.2.
			  On Play click the Game will be saved in the database.
			
	
	5.2. Game has started (/text-fill):

		UI State:
			* Elements#3State#2
			* On the left, Level + Remix buttons are disabled.
			* On the right the "Check" and the "Cancel" buttons will be displayed.
			* Button "Check" is disabled until the user fills the text.
		
		5.2.1 Fetch the active game from the backend.
		5.2.2 Play the game.
		5.2.3 If "Cancel" click, then go to 5.3.
		5.2.4 When finished, click on "Check" button.
		5.2.5 If wrong answer, show the errors and go to 4.2.
		5.2.6 If correct answer, show the Elements#1.

	5.3 Canceling the game
	
		UI State:
			* Same as 5.1
			
		5.3.1 A popup will appear asking: "Do you want to really cancel the game? Yes / No".
		5.3.2 If click on No, then go to 5.2.
		5.3.3 If click on Yes, then go to 4.
